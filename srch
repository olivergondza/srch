#!/bin/bash

# http://stackoverflow.com/a/10660730/2091470
function _rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos=0

    for (( ; pos<strlen ; pos++ )); do
       c=${string:$pos:1}
       case "$c" in
          [-_.~a-zA-Z0-9] )
              o="${c}"
          ;;
          * )
              printf -v o '%%%02x' "'$c"
          ;;
       esac
       encoded+="${o}"
    done
    eval "$2='$encoded'"
}

function _print_engines() {
    echo "Available engines:"
    for e in $(ls $SRCH_ENGINES/); do
        . "$SRCH_ENGINES/$e"
        echo -e "\t $e\t$DESCRIPTION"
        unset DESCRIPTION
    done
}

########

: ${SRCH_DIR="$(readlink -f ~/.srch)"}
: ${SRCH_CONFIG="$SRCH_DIR/config"}
: ${SRCH_ENGINES="$SRCH_DIR/engines"}
if [ ! -d "$SRCH_DIR/engines" ]; then
    echo "Illegal SRCH_DIR provided: $SRCH_DIR" >&2
    exit 1
fi
if [ ! -d "$SRCH_ENGINES" ]; then
    echo "Illegal SRCH_ENGINES provided: $SRCH_ENGINES" >&2
    exit 1
fi
if [ ! -f "$SRCH_CONFIG" ]; then
    echo "Illegal SRCH_CONFIG provided: $SRCH_CONFIG" >&2
    exit 1
fi

if [ -f "$SRCH_CONFIG" ]; then
    . "$SRCH_CONFIG"
fi

if [ ! -z "$SRCH_DEFAULT_ENGINE" -a ! -f "$SRCH_ENGINES/$SRCH_DEFAULT_ENGINE" ]; then
    echo "SRCH_DEFAULT_ENGINE does not exist: $SRCH_DEFAULT_ENGINE" 2>&1
    _print_engines >&2
    exit 1
fi

if [ "$1" == '-h' -o "$1" == '--help' ]; then
    printf "Usage $0 <ENGINE_NAME> <SEARCH_STRING>\n\n"

    printf "SEARCH_STRING argument can be omitted to read it from STDIN. In case there is a default engine configured, it can be omitted too.\n\n"

    if [ ! -z "$SRCH_DEFAULT_ENGINE" ]; then
        printf "Default engine: $SRCH_DEFAULT_ENGINE\n\n"
    fi

    _print_engines

    printf "\nConfig directory: $SRCH_CONFIG\n"
    exit 0
fi

engine="$SRCH_DEFAULT_ENGINE"
if [ -f "$SRCH_ENGINES/$1" -o -z "$SRCH_DEFAULT_ENGINE" ]; then
    engine="$1"
    shift
fi
engine_config="$SRCH_ENGINES/$engine"
if [ ! -f "$engine_config" ]; then
    if [ -z "$engine" ]; then
        echo "No search engine specified"  >&2
    else
        echo "No engine '$engine' configured"  >&2
    fi
    _print_engines >&2
    exit 1
fi

. $engine_config

# urlencode all args
if [ $# -eq 0 ]; then
  echo "Readig search string from STDIN..." >&2
  arg="$(cat)"
  if grep -P '\w' <<< "$arg" > /dev/null; then
      args=( "$arg" )
  else
      # Only whitespace provided via stdin - aborting
      exit 0
  fi
else
  args=( "$@" )
fi
for (( pos=0 ; pos<${#args[@]} ; pos++ )); do
    _rawurlencode "${args[pos]}" "arg"
    args[$pos]=$arg
done

if [ "$(type -t URL)" == "function" ]; then
  exec $BROWSER "$(URL "$@")"
else
  set -- "${args[@]}" # Set encoded values to positional args
  exec $BROWSER "$(eval "echo \"${URL}\"")"
fi
